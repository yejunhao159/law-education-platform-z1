# =============================================================================
# GitHub Actions - 主分支自动构建Docker镜像
# =============================================================================
# 触发条件：推送到main分支
# 功能：
#   1. 自动构建 Docker 镜像
#   2. 推送到 GitHub Container Registry (GHCR)
#   3. 标签：latest + commit SHA
#   4. 验证Socket.IO依赖完整性
# =============================================================================

name: Build Docker Image on Main Push

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/**'

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image (Main)
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=main-
            type=raw,value=deploy-${{ github.run_number }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Docker Image Health
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔍 [CI] 镜像完整性验证（治本方案 v2.0）"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""

          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          echo "📦 检查核心依赖（自动安装验证）..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            sh -c '
              # Socket.IO核心依赖检查
              test -d /app/node_modules/socket.io && echo "  ✅ socket.io" || exit 1
              test -d /app/node_modules/socket.io-client && echo "  ✅ socket.io-client" || exit 1
              test -d /app/node_modules/engine.io && echo "  ✅ engine.io" || exit 1

              # 传递依赖检查（Issue #49, #50修复验证）
              test -d /app/node_modules/negotiator && echo "  ✅ negotiator (传递依赖)" || exit 1
              test -d /app/node_modules/accepts && echo "  ✅ accepts" || exit 1
              test -d /app/node_modules/cors && echo "  ✅ cors" || exit 1
              test -d /app/node_modules/mime-types && echo "  ✅ mime-types" || exit 1

              # AI相关依赖
              test -d /app/node_modules/tiktoken && echo "  ✅ tiktoken (WASM)" || exit 1

              # Socket.IO服务器文件
              test -d /app/server && echo "  ✅ Socket.IO server" || exit 1
              test -f /app/server/socket-server.js && echo "  ✅ socket-server.js" || exit 1

              # 环境验证脚本
              test -f /app/scripts/check-env.sh && echo "  ✅ check-env.sh" || exit 1
              test -x /app/scripts/check-env.sh && echo "  ✅ check-env.sh (可执行)" || exit 1

              echo ""
              echo "✅ 所有核心依赖验证通过！"
            '

          echo ""
          echo "🧪 测试环境变量验证脚本..."
          docker run --rm \
            -e DEEPSEEK_API_KEY=test-key \
            -e NEXT_PUBLIC_DEEPSEEK_API_KEY=test-key \
            -e NODE_ENV=production \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            sh -c './scripts/check-env.sh'

          echo ""
          echo "✅ 镜像健康检查完成！"

      - name: Create deployment summary
        run: |
          echo "## 🚀 Docker镜像构建完成（治本方案 v2.0）" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 构建信息" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Additional Tag:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:deploy-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ 核心改进" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **依赖自动化管理**：使用 \`npm ci --only=production\` 自动安装所有依赖" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **传递依赖完整**：自动处理 Socket.IO 的所有传递依赖（Issue #49, #50 彻底修复）" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **环境变量验证**：启动时自动检查必需的环境变量" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **可维护性提升**：socket.io 升级不再需要修改 Dockerfile" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 已验证的依赖" >> $GITHUB_STEP_SUMMARY
          echo "- Socket.IO (v4.8.1) + 所有传递依赖" >> $GITHUB_STEP_SUMMARY
          echo "- tiktoken (WASM依赖)" >> $GITHUB_STEP_SUMMARY
          echo "- 环境变量验证脚本" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 部署命令" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# 1. 拉取最新镜像" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 2. 确保环境变量文件存在（必需！）" >> $GITHUB_STEP_SUMMARY
          echo "# 参考 .env.example 创建 .env.production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 3. 重启服务" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose -f docker-compose.prod.yml down" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose -f docker-compose.prod.yml up -d" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 4. 验证部署" >> $GITHUB_STEP_SUMMARY
          echo "docker logs law-edu-app-prod --tail 50" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ 部署前必读" >> $GITHUB_STEP_SUMMARY
          echo "**必需的环境变量**（容器启动时会自动验证）：" >> $GITHUB_STEP_SUMMARY
          echo "- \`DEEPSEEK_API_KEY\` - DeepSeek AI密钥" >> $GITHUB_STEP_SUMMARY
          echo "- \`AI_302_API_KEY\` - 302.ai PPT生成密钥（服务端读取，前端仅访问 \`/api/ppt\`）" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "如果环境变量缺失，容器将拒绝启动并显示详细错误信息。" >> $GITHUB_STEP_SUMMARY
