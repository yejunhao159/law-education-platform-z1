# =============================================================================
# GitHub Actions - CIÊµÅÁ®ãÔºàÊåÅÁª≠ÈõÜÊàêÔºâ
# =============================================================================
# Ëß¶ÂèëÊù°‰ª∂ÔºöPull Request Âíå Push Âà∞ main/develop ÂàÜÊîØ
# ÂäüËÉΩÔºö
#   1. ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•ÔºàLint + Type CheckÔºâ
#   2. ÂçïÂÖÉÊµãËØïÂíåÈõÜÊàêÊµãËØï
#   3. ‰ª£Á†ÅË¶ÜÁõñÁéáÊä•Âëä
#   4. ‰æùËµñÂÆâÂÖ®ÂÆ°ËÆ°
#   5. ÊûÑÂª∫È™åËØÅ
# =============================================================================

name: CI - Continuous Integration

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/**'

  workflow_dispatch:

# Âπ∂ÂèëÊéßÂà∂ÔºöÂêå‰∏ÄPRÂè™ËøêË°åÊúÄÊñ∞ÁöÑworkflow
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================
  # Job 1: ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•
  # ============================================
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Run Prettier check
        run: npm run format:check

  # ============================================
  # Job 2: ÂçïÂÖÉÊµãËØïÂíåÈõÜÊàêÊµãËØï
  # ============================================
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --coverage

      - name: Run integration tests
        run: npm run test:integration

      - name: Upload coverage to GitHub
        if: matrix.node-version == 20
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      - name: Generate coverage summary
        if: matrix.node-version == 20
        run: |
          echo "## üìä Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coverage/coverage-summary.txt 2>/dev/null || echo "Coverage report not generated"
          echo '```' >> $GITHUB_STEP_SUMMARY

  # ============================================
  # Job 3: E2EÊµãËØïÔºàÂèØÈÄâÔºåËµÑÊ∫êÊ∂àËÄóÂ§ßÔºâ
  # ============================================
  e2e-test:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'e2e-test')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # ============================================
  # Job 4: ‰æùËµñÂÆâÂÖ®ÂÆ°ËÆ°
  # ============================================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Generate audit report
        run: |
          echo "## üîí Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          npm audit 2>&1 | head -n 50 || echo "No vulnerabilities found"
          echo '```' >> $GITHUB_STEP_SUMMARY

  # ============================================
  # Job 5: ÊûÑÂª∫È™åËØÅ
  # ============================================
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [code-quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for build
        run: |
          cat > .env.production << 'EOF'
          NODE_ENV=production
          NEXT_PUBLIC_APP_NAME="Law Education Platform"
          NEXT_PUBLIC_API_URL=http://localhost:3000
          EOF

      - name: Build Next.js application
        run: npm run build

      - name: Check build output
        run: |
          ls -lh .next/
          echo "## ‚úÖ Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Next.js build completed successfully!" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # Job 6: CIÁä∂ÊÄÅÊ±áÊÄª
  # ============================================
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test, security-audit, build]
    if: always()

    steps:
      - name: Check CI results
        run: |
          echo "## üéØ CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Warning' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Fail if critical jobs failed
        if: needs.code-quality.result != 'success' || needs.test.result != 'success' || needs.build.result != 'success'
        run: |
          echo "‚ùå CI pipeline failed - check the logs above"
          exit 1
