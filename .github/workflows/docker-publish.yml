# =============================================================================
# GitHub Actions - Docker 镜像自动构建和发布
# =============================================================================
# 触发条件：推送 tag（格式：v*，如 v1.0.0、v1.2.3）
# 功能：
#   1. 构建 Docker 镜像
#   2. 推送到 GitHub Container Registry (GHCR)
#   3. 仅支持 AMD64 架构（ARM64 因 Tailwind CSS 4.x 兼容性问题暂不支持）
#   4. 自动打标签（latest + 版本号）
# =============================================================================

name: Docker Build and Publish

# 触发条件
on:
  push:
    tags:
      - 'v*'  # 匹配 v1.0.0, v2.1.3 等格式

  # 手动触发（用于测试）
  workflow_dispatch:

# 环境变量
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}  # 格式：用户名/仓库名

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    # 权限配置
    permissions:
      contents: read
      packages: write  # 允许推送到 GHCR

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 设置 Docker Buildx（支持多架构构建）
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. 登录到 GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. 提取元数据（标签、版本等）
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      # 5. 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64  # 仅 AMD64 架构（ARM64 因 lightningcss 兼容性问题暂不支持）
          cache-from: type=gha  # 使用 GitHub Actions 缓存
          cache-to: type=gha,mode=max

      # 6. 输出镜像信息
      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.build-and-push.outputs.digest }}"

      # 7. 创建部署说明（可选）
      - name: Create deployment notes
        run: |
          echo "## 🚀 Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 部署命令" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose -f docker-compose.prod.yml up -d" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
