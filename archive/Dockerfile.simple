# =============================================================================
# 法学教育平台 - Docker 极简部署镜像（方案C）
# =============================================================================
#
# 架构设计（方案C - 极简架构）：
# - 移除PM2，使用Docker原生进程管理
# - Next.js + Socket.IO 运行在同一个Node.js进程中
# - 符合Docker最佳实践："一容器一进程"
#
# 优势：
# - ✅ 简单：没有PM2权限问题
# - ✅ 可靠：Docker负责进程监控和重启
# - ✅ 高效：减少一层进程管理开销
# - ✅ 易维护：日志统一，调试简单
#
# =============================================================================

FROM node:20

WORKDIR /app

# =============================================================================
# 接收构建参数
# =============================================================================
ARG DEEPSEEK_API_KEY=""
ARG NEXT_PUBLIC_AI_302_API_KEY=""
ARG NEXT_PUBLIC_BASE_URL="http://localhost:3000"
ARG NEXT_PUBLIC_SOCKET_IO_URL="http://localhost:3000"

# =============================================================================
# 构建阶段
# =============================================================================

# 安装依赖
COPY package.json package-lock.json ./
RUN npm ci --legacy-peer-deps || npm ci --legacy-peer-deps --no-optional

# 复制源代码
COPY . .

# 设置环境变量并构建
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
ENV NEXT_PUBLIC_AI_302_API_KEY=${NEXT_PUBLIC_AI_302_API_KEY}
ENV NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
ENV NEXT_PUBLIC_SOCKET_IO_URL=${NEXT_PUBLIC_SOCKET_IO_URL}

# 构建 Next.js 应用
RUN npm run build

# =============================================================================
# 生产运行环境准备
# =============================================================================

# 清理构建依赖（保留生产依赖）
# 跳过prepare脚本（husky install不需要在生产环境运行）
RUN npm ci --only=production --legacy-peer-deps --omit=dev --ignore-scripts || \
    npm ci --only=production --legacy-peer-deps --omit=dev --no-optional --ignore-scripts

# 创建非 root 用户
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 nextjs

# =============================================================================
# 移除PM2 - 使用统一启动脚本
# =============================================================================
# 不再需要：
# - PM2安装
# - PM2配置文件
# - PM2目录创建
# - PM2权限设置

# 复制环境变量脚本
COPY scripts/generate-env.sh ./scripts/generate-env.sh
COPY scripts/check-env.sh ./scripts/check-env.sh
RUN chmod +x ./scripts/generate-env.sh ./scripts/check-env.sh

# 复制统一启动脚本
COPY server/index.js ./server/index.js

# 创建必要的目录
RUN mkdir -p /app/logs /app/data && chown -R nextjs:nodejs /app

# 修复权限
RUN chown -R nextjs:nodejs /app

# 🎯 游客模式：跳过登录验证（临时调试用）
ENV GUEST_MODE=true

# 切换到非 root 用户
USER nextjs

# =============================================================================
# 暴露端口和健康检查
# =============================================================================
EXPOSE 3000 3001

HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1) })\" || exit 1

# =============================================================================
# 启动命令 - 极简启动流程
# =============================================================================
# 流程：
# 1. generate-env.sh   → 运行时生成.env.production
# 2. check-env.sh      → 验证必要的API密钥
# 3. node server/index.js → 启动Next.js（3000）+ Socket.IO（3001）
#
# 优势：
# - ✅ 移除PM2依赖，完全简化架构
# - ✅ Docker自带进程管理和重启机制
# - ✅ 符合Next.js官方最佳实践
# - ✅ 统一日志输出（docker logs）
# - ✅ 易于调试和维护
# =============================================================================

CMD ./scripts/generate-env.sh && \
    ./scripts/check-env.sh && \
    node server/index.js
