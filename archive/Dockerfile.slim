# =============================================================================
# 法学教育平台 - Docker 纯Slim镜像（更快构建）
# =============================================================================
#
# 策略：全部使用 node:20-slim
# 优势：
# - ✅ 构建更快（slim镜像下载快）
# - ✅ 镜像更小（~250MB vs ~1GB）
# - ⚠️ 风险：如果有原生依赖编译需求可能失败
#
# 如果构建失败，回退到 Dockerfile.optimized（多阶段构建）
# =============================================================================

# =============================================================================
# 阶段 1: 依赖安装
# =============================================================================
FROM node:20-slim AS deps

WORKDIR /app

# 安装可能需要的最小构建工具（针对pg等原生模块）
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    make \
    g++ \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# 复制依赖文件
COPY package.json package-lock.json ./

# 安装依赖
RUN npm ci --legacy-peer-deps || npm ci --legacy-peer-deps --no-optional

# =============================================================================
# 阶段 2: 构建
# =============================================================================
FROM node:20-slim AS builder

WORKDIR /app

# 复制依赖
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# 接收构建参数
ARG DEEPSEEK_API_KEY=""
ARG NEXT_PUBLIC_AI_302_API_KEY=""
ARG NEXT_PUBLIC_BASE_URL="http://localhost:3000"
ARG NEXT_PUBLIC_SOCKET_IO_URL="http://localhost:3000"
ARG DB_HOST="postgres"
ARG DB_PORT="5432"
ARG DB_NAME="law_education"
ARG DB_USER="postgres"
ARG DB_PASSWORD="postgres"

# 设置环境变量
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY} \
    NEXT_PUBLIC_AI_302_API_KEY=${NEXT_PUBLIC_AI_302_API_KEY} \
    NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL} \
    NEXT_PUBLIC_SOCKET_IO_URL=${NEXT_PUBLIC_SOCKET_IO_URL} \
    DB_HOST=${DB_HOST} \
    DB_PORT=${DB_PORT} \
    DB_NAME=${DB_NAME} \
    DB_USER=${DB_USER} \
    DB_PASSWORD=${DB_PASSWORD}

# 构建应用
RUN npm run build

# =============================================================================
# 阶段 3: 运行
# =============================================================================
FROM node:20-slim AS runner

WORKDIR /app

ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1

# 创建非root用户
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 nextjs

# 复制package.json
COPY package.json package-lock.json ./

# 安装生产依赖（保留pg等运行时需要的包）
RUN npm ci --only=production --legacy-peer-deps --omit=dev --ignore-scripts || \
    npm ci --only=production --legacy-peer-deps --omit=dev --no-optional --ignore-scripts

# 复制构建产物
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/server ./server
COPY --from=builder --chown=nextjs:nodejs /app/lib ./lib
COPY --from=builder --chown=nextjs:nodejs /app/scripts ./scripts

# 设置脚本权限
RUN chmod +x ./scripts/generate-env.sh ./scripts/check-env.sh

# 创建目录
RUN mkdir -p /app/logs /app/data && chown -R nextjs:nodejs /app

# 运行时环境变量
ARG DEEPSEEK_API_KEY=""
ARG NEXT_PUBLIC_AI_302_API_KEY=""
ARG NEXT_PUBLIC_BASE_URL="http://localhost:3000"
ARG NEXT_PUBLIC_SOCKET_IO_URL="http://localhost:3000"
ARG DB_HOST="postgres"
ARG DB_PORT="5432"
ARG DB_NAME="law_education"
ARG DB_USER="postgres"
ARG DB_PASSWORD="postgres"
ARG AUTO_SEED_DATABASE="false"
ARG GUEST_MODE="false"

ENV DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY} \
    NEXT_PUBLIC_AI_302_API_KEY=${NEXT_PUBLIC_AI_302_API_KEY} \
    NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL} \
    NEXT_PUBLIC_SOCKET_IO_URL=${NEXT_PUBLIC_SOCKET_IO_URL} \
    DB_HOST=${DB_HOST} \
    DB_PORT=${DB_PORT} \
    DB_NAME=${DB_NAME} \
    DB_USER=${DB_USER} \
    DB_PASSWORD=${DB_PASSWORD} \
    AUTO_SEED_DATABASE=${AUTO_SEED_DATABASE} \
    GUEST_MODE=${GUEST_MODE}

USER nextjs

EXPOSE 3000 3001

HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1) })" || exit 1

CMD ["node", "server/index.js"]
