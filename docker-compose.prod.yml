# =============================================================================
# Docker Compose 配置 - 生产环境
# =============================================================================
# 用途：企业服务器生产部署
# 使用方法：
#   首次部署：docker-compose -f docker-compose.prod.yml up -d
#   更新版本：docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d
#   停止服务：docker-compose -f docker-compose.prod.yml down
#   查看日志：docker-compose -f docker-compose.prod.yml logs -f
# =============================================================================

services:
  # 主应用服务
  app:
    # 使用 GitHub Container Registry 的镜像
    # 格式：ghcr.io/<用户名>/<仓库名>:<版本>
    image: ghcr.io/yejunhao159/law-education-platform-z1:v1.1.6
    container_name: law-edu-app-prod

    # 端口映射
    ports:
      - "3000:3000"  # Next.js应用
      - "3001:3001"  # Socket.IO服务器

    # 环境变量（从 .env.production 文件加载）
    env_file:
      - .env.production

    # 环境变量（生产环境配置）
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0

    # 数据卷挂载（可选：用于持久化数据）
    volumes:
      # 日志持久化
      - ./logs:/app/logs
      # 数据库持久化
      - ./data:/app/data
      # 备份目录
      - ./backups:/app/backups
      # 用户上传文件持久化（如果有）
      # - ./uploads:/app/uploads

    # 健康检查（增强版）
    healthcheck:
      test:
        - "CMD-SHELL"
        - |
          node -e "
          const http = require('http');
          Promise.all([
            new Promise((resolve) => {
              http.get('http://localhost:3000/api/health', (r) => {
                resolve(r.statusCode === 200);
              }).on('error', () => resolve(false));
            }),
            new Promise((resolve) => {
              http.get('http://localhost:3001/socket.io/', (r) => {
                resolve(r.statusCode === 200 || r.statusCode === 400);
              }).on('error', () => resolve(false));
            })
          ]).then(([nextjs, socket]) => {
            process.exit(nextjs && socket ? 0 : 1);
          });
          "
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s

    # 重启策略（生产环境：总是重启）
    restart: always

    # 资源限制（根据服务器配置调整）
    # 修改原因：服务器配置为2核，原配置4核超出硬件限制
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"

# 网络配置
networks:
  default:
    name: law-edu-prod-network
    driver: bridge

# 数据卷配置（用于持久化）
volumes:
  logs:
    driver: local
  data:
    driver: local
  backups:
    driver: local
