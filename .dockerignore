# =============================================================================
# Docker 构建排除文件 - 优化版
# =============================================================================
# 目的：减小构建上下文体积，加快构建速度，同时确保关键文件不被排除
# =============================================================================

# ⚠️ 关键提醒：
# 以下目录必须保留，不要添加到忽略列表：
# - app/            (Next.js页面和API路由)
# - server/         (Socket.IO服务器)
# - scripts/        (运行时脚本: generate-env.sh, check-env.sh, start.sh)
# - lib/            (核心库代码)
# - components/     (React组件)
# - public/         (静态资源)
# =============================================================================

# 日志文件
npm-debug.log*
yarn-debug.log*
yarn-error.log*
*.log

# 构建产物和临时目录（会在Docker中重新生成）
.next
out
dist
build
coverage
.nyc_output

# 测试相关
__tests__
__mocks__
test-results
playwright-report
*.test.ts
*.test.tsx
*.spec.ts
*.spec.tsx

# 环境变量（敏感信息，不应打包到镜像）
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env*.local

# Git 相关
.git
.gitignore
.gitattributes
.github

# IDE 配置
.vscode
.idea
*.swp
*.swo
*~

# 文档（减少镜像体积）
README.md
CLAUDE.md
docs/
*.md

# 临时文件
tmp/
temp/
.tmp/

# 备份文件
*.backup
*.bak
*.sqlite-backup
lib/db/*.sqlite-backup

# 操作系统文件
.DS_Store
.AppleDouble
.LSOverride
Thumbs.db
ehthumbs.db
Desktop.ini
.directory

# 包管理器锁文件（保留package-lock.json）
yarn.lock
pnpm-lock.yaml

# TypeScript 缓存
*.tsbuildinfo

# Playwright
.playwright

# Docker 相关（避免循环）
.dockerignore
Dockerfile.optimized
Dockerfile.simple
Dockerfile.slim
docker-compose.yml
docker-compose.prod.yml
docker-compose.blue-green.yml

# 多余的脚本（核心脚本会被明确COPY）
scripts/deploy*.sh
scripts/test*.sh
scripts/build-and-export*.sh
scripts/split-image.sh
scripts/transfer*.sh
scripts/download*.sh
scripts/install-docker-wsl2.sh
scripts/quick-deploy.sh

# 数据文件（避免打包本地数据）
data/
*.db
*.sqlite

# 配置冲突文件（避免与package.json冲突）
.browserslistrc
.babelrc
.eslintrc.local

# 临时和备份文件（构建时不需要）
*.tsx.backup
*.ts.backup
app/*.backup
components/*.backup
